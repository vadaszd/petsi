@startuml
hide empty members

namespace Structure {

class Net {
    name
    addType(typeName)
    addPlace(name, type, policy)
    addImmediateTransition(name, priority, weight)
    addTimedTransition(name, firingDistribution)
    addConstructor(name, transitionName, outputPlaceName)
    addDestructor(name, transitionName, inputPlaceName)
    addTransfer(name, transitionName, inputPlaceName, outputPlaceName)
    addTest(name, transitionName, placeName)
}

abstract class Place {
    name
    attachObserver(AbstractPlaceObserver o)
    attachObserver(PresenceObserver o)
    push(Token t)
    Token pop()
    Token peek()
}

note as placeNote
All arcs connected
to a place must have
the type of the place
end note
placeNote .. Place

class Transition{
    name
    priority
    weight
    deadline
    disabledArcCount
    attachObserver(AbstractTransitionObserver o)
    bool isEnabled()
    fire()
    incrementDisabledArcCount()
    decrementDisabledArcCount()
}
note right
isEnabled() == True iff
disabledArcCount == 0
end note

interface Condition{
    isTrue()
}

class UpdateOp {
    key
    newValue
    apply(Token t)
}

abstract class Arc {
    name
    isEnabled()
    flow()
}

class Token {
    -attachObserver(AbstractTokenObserver o)
    -removeObserver(AbstractTokenObserver o)
    moveTo(Place p)
    removeFrom(Place p)
    delete()
}
class Tag{
    key
    value
}

interface TokenPlacer

interface PresenceObserver {
    reportNoToken()
    reportSomeToken()
}

Net *-- "*" Type: types
Net *--> "*" Place: places
Net *--> "*" Transition: transitions
Net *--> "*" Plugins.AbstractPlugin: observers
Type <-- "*" Arc
Type <-- "*" Place
Place -l- "*" Token
Token *-- "*" Plugins.AbstractTokenObserver
Token *-- "*" Tag : tags
Place *-- "*" Plugins.AbstractPlaceObserver
TokenPlacer .u.|> Arc
PresenceObserver .u.|> Arc
Transition *-- "*" Arc
Transition *-- "*" Plugins.AbstractTransitionObserver
PresenceObserver "*" -- Place : input
TestArc .d.|> PresenceObserver
ConstructorArc .d.|> TokenPlacer
DestructorArc .d.|> PresenceObserver
TokenPlacer "*" --> Place : output
Transfer  .d.|> TokenPlacer
Transfer  .d.|> PresenceObserver
FIFO .u.|> Place
LIFO .u.|> Place
TokenPlacer *--> "*" Updater : updates
Updater *--> Condition
Updater *--> UpdateOp


}

namespace Simulation {
class AutoFirePlugin{
    currentTime
}

class TransitionObserver

class TokenObserver {
    creationTime
    arrivalTime
}
Simulation.AutoFirePlugin *-- "*" TransitionObserver
Simulation.AutoFirePlugin *-- "*" TokenObserver
Simulation.AutoFirePlugin *-- "*" PlaceObserver
Simulation.AutoFirePlugin ..|> Plugins.AbstractPlugin
TransitionObserver ..|> Plugins.AbstractTransitionObserver
TokenObserver ..|> Plugins.AbstractTokenObserver
PlaceObserver ..|> Plugins.AbstractPlaceObserver
}

namespace Plugins {
interface AbstractPlugin {
    name
    AbstractPlaceObserver observe(Structure.Place p)
    AbstractTokenObserver observe(Simulation.Token t)
    AbstractTransitionObserver observe(Structure.Transition t)
}
interface AbstractPlaceObserver{
    reportArrivalOf(token)
    reportDepartureOf(token)
}
interface AbstractTokenObserver{
    reportConstruction()
    reportDestruction()
    reportArrivalAt(Structure.Place p)
    reportDepartureFrom(Structure.Place p)
}
interface AbstractTransitionObserver{
    beforeFiring()
    afterFiring()
    gotEnabled()
    gotDisabled()
}

}
@enduml